using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

public class GameManagerController : MonoBehaviour
{
    //reference to the Player prefab so we can spawn the player in a given scene
    public GameObject playerPrefab;
    private CameraController cam;
    private Rigidbody2D player;
    private Vector2 spawnPlace;

    //this object will exist for as long as the game is running
    public void Awake()
    {
        DontDestroyOnLoad(gameObject);
    }//end method Awake

    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(LoadingLevel(Load()));
    }//end method Start

    public IEnumerator LoadingLevel(SaveData data)
    {
        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync(data.roomName);


        while (!asyncLoad.isDone)
        {
            yield return null;
            Debug.Log("room has not yet fully loaded");
        }
        Debug.Log("room has fully loaded");

        //get a reference to the camera
        cam = Camera.main.GetComponent<CameraController>();
        player = GameObject.FindGameObjectWithTag("Player").GetComponent<Rigidbody2D>();

        cam.minPosition = new Vector2 (data.camPositionMinX, data.camPositionMinY);
        cam.maxPosition = new Vector2(data.camPositionMaxX, data.camPositionMaxY);

        spawnPlace = new Vector2(data.xCoord, data.yCoord);

        player.position = spawnPlace;
    }

    public static void Save(UnityEngine.SceneManagement.Scene scene, float x, float y, float minX, float minY, float maxX, float maxY)
    {
        BinaryFormatter formatter = new BinaryFormatter();
        string path = Application.persistentDataPath + "/theGame.data";
        FileStream stream = new FileStream(path, FileMode.Create);

        SaveData data = new SaveData(scene, x, y, minX, minY, maxX, maxY);

        formatter.Serialize(stream, data);
        stream.Close();

        Debug.Log("Room Saved: " + data.roomName);
    }

    public static SaveData Load()
    {
        string path = Application.persistentDataPath + "/theGame.data";
        if (File.Exists(path))
        {

            BinaryFormatter formatter = new BinaryFormatter();
            FileStream stream = new FileStream(path, FileMode.Open);

            SaveData data = formatter.Deserialize(stream) as SaveData;
            stream.Close();

            return data;

        }
        else
        {
            Debug.LogError("Save File not found in " + path);
            return null;
        }
    }

}//end class GameManagerController